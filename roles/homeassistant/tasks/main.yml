---
# tasks file for homeassistant
- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_network_os | default(none) }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_distribution.split(' ')[0] | lower }}.yml"
        - "{{ ansible_os_family | lower }}_family.yml"
        - "{{ ansible_system | lower }}.yml"
        - main.yml
      paths:
        - "vars"
  become: no
  tags:
    - upgrade

- name: "Install packages"
  ansible.builtin.package:
    name: "{{ hearthminion_homeassistant_packages }}"
    state: present
  become: yes
  tags:
    - install-packages
    - upgrade

- name: "Check if we are upgrading homeassistant."
  ansible.builtin.set_fact:
    __homeassistant_upgrade: yes
  become: no
  tags:
    - never
    - upgrade
    - upgrade-homeassistant

# ==================================================================================================
#
# TODO: Check if hearthminion_homeassistant_config_dir needs to be created first, or if it needs
# to be created when there isn't a repo to download from.
#
# These next four tasks will restore home assistant's configuration from git repos.
#
# ==================================================================================================
- name: "Download configuration from git repo."
  ansible.builtin.git:
    repo: "{{ hearthminion_homeassistant_config_git_url }}"
    dest: "{{ hearthminion_homeassistant_config_dir }}"
    force: false
    update: true
  when:
    - hearthminion_homeassistant_config_git_url is truthy

- name: "Download storage from git repo."
  ansible.builtin.git:
    repo: "{{ hearthminion_homeassistant_storage_git_url }}"
    dest: "{{ hearthminion_homeassistant_config_dir }}/.storage"
    update: false
  when:
    - hearthminion_homeassistant_storage_git_url is truthy

- name: "Get secretes."
  ansible.builtin.set_fact:
    __ha_secrets: "{{ __ha_secrets + __secrets }}"
  loop: "{{ hearthminion_homeassistant_secrets }}"
  vars:
    __secrets:
      - name: "{{ item }}"
        secret: "{{ __password }}"
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/services/homeassistant/{{ item }}"
    __password_create: "create=false"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  tags:
    - upgrade

- name: "Create config files"
  ansible.builtin.template:
    src: "{{ item.name }}.yml.j2"
    dest: "{{ hearthminion_homeassistant_config_dir }}/{{ item.name }}.yaml"
    owner: "{{ hearthminion_homeassistant_owner }}"
    group: "{{ hearthminion_homeassistant_group }}"
    mode: "{{ item.mode }}"
  loop: "{{ hearthminion_homeassistant_config_files }}"
  tags:
    - upgrade

- name: "Install Home Assistant Docker Container."
  community.docker.docker_container:
    name: "homeassistant"
    image: "ghcr.io/home-assistant/home-assistant:{{ hearthminion_homeassistant_version }}"
    restart_policy: unless-stopped
    network_mode: host
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ hearthminion_homeassistant_config_dir }}:/config"
      - "/run/dbus:/run/dbus:ro"
    detach: yes
    init: no
    container_default_behavior: no_defaults
    auto_remove: no
    interactive: no
    memory: "0"
    paused: no
    privileged: no
    read_only: no
    tty: no
    pull: "{{ __homeassistant_upgrade }}"
  become: yes
  tags:
    - upgrade

# ==================================================================================================
#
# This next set of tasks configures Nginx to provide https capabilities.
#
# This needs another way of checking and disabling.
#
# Two sites cannot both have "default_server" set.  So what really needs to happen is a way to check
# if another site has that value set.  If so, we need to not enable "default_server" in this
# configuration file.
#
# Current workaround is to install our site, and remove "default" site from the enabled servers.
#
# This will break setups where "default" site is another website on the host that is in use.
#
# ==================================================================================================
- name: "Install Nginx virtual host config file."
  ansible.builtin.template:
    src: "nginx-site.conf.j2"
    dest: "/etc/nginx/sites-available/{{ inventory_hostname }}.conf"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ virtual_hosts }}"
  become: yes
  when:
    - virtual_hosts is defined
    - item.content is defined
    - item.content == "homeassistant"
    - item.enabled is defined
    - item.enabled
  notify: reload nginx
  tags:
    - upgrade

- name: "Enable nginx site."
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ inventory_hostname }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ inventory_hostname }}.conf"
    owner: root
    group: root
    state: "link"
  loop: "{{ virtual_hosts }}"
  become: yes
  when:
    - virtual_hosts is defined
    - item.content is defined
    - item.content == "homeassistant"
    - item.enabled is defined
    - item.enabled
  notify: reload nginx
  tags:
    - upgrade

- name: "Install ssl snippets"
  ansible.builtin.template:
    src: "ssl-snippets.conf.j2"
    dest: "/etc/nginx/snippets/{{ inventory_hostname }}.conf"
    owner: root
    group: root
    mode: "0644"
  become: yes
  notify: restart nginx
  tags:
    - nginx

- name: "Ensure default site does not exist."
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/default.conf"
    state: "absent"
  become: yes
  notify: reload nginx
  tags:
    - upgrade

# ==================================================================================================
#
# Task: Create Cron to reboot system daily at 4 AM.
#
# Yes, we know this can be done through Home Assistant.  This is a way to protect against a failure
# of Home Assistant itself.
#
# TODO: Create script that checks for a valid configuration before rebooting.  If configuration is
#       not valid, email <user> <log output from check> to inform the user instead of rebooting
#
# ==================================================================================================
- name: "Create cron to reboot system daily at 4 AM."
  ansible.builtin.cron:
    name: "Reboot System"
    #month: "*"
    #day: "*"
    #weekday: "*"
    hour: "4"
    minute: "0"
    job: "/sbin/reboot"
    state: present
    backup: false
    disabled: "{{ hearthminion_homeassistant_autoreboot_disabled }}"
  become: yes
  tags:
    - upgrade
