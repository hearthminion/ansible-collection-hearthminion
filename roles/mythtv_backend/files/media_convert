#!/bin/bash

###############################################
#
# Media Convert:
#
# This program recursively searches a given
# directory for mkv files and converts them into 
# m4v files for portable players that do not support
# mkv files.
#
# This program preserves the original flac file
# directory structure, essentially mirroring the
# original structure, just with mk4 files instead.
#
###############################################

source ${HOME}/.local/libs/search

###############################################
#
# function help:
#
# This file displays the error messages if an
# invalid switch is provided to the program
#
###############################################
function help() {
cat <<EOF
Media Convert:
This program recursively searches a given
directory for files and converts them into 
files for portable players.

This program preserves the original file
directory structure, essentially mirroring the
original structure, just with files appopriate
to portable media instead.

Arguments      Description

Actions:
-A|--all               converts all files
-a|--audio             converts audio files
-p|--photos            converts photos
-v|--video             converts video files
-y|--hdvideo
-z|--h265
-o|--overwrite         overwrite existing portable media files
-b|--basedir [FOLDER]  sets the base directory to FOLDER.  All sub directories must be inside this folder.

-i|--id|--identify     identifies files to be converted without actually making any changes
-c |--check            checks for missing dependencies
-h|--help              displays this help file

Video Convert Options:
-X [XRES]      Sets largest width (pixels) for video file
lll
Audio Convert Options:
-u|--update            updates id3 tags with updates from original flac files

Photo Convert Options:
-d|--desktop   Produces Desktop Size (1920x1024)
-j|--jpg_web   Produces jpgs full Size
-s|--small     Produces emailable size (640x480)
-f|--fridge    Produces Refridgerator size (480x ???)
-w|--wallpaper Produces Phone Wallpaper size (???x???)

EOF
}

###############################################
#
# function set_base_variables
#
# This function sets the basic variables that
# remain the same through out the encoding process.
#
###############################################
function set_base_variables () {
    if [ -n "$BASEDIR" ]; then
	MAIN_DIR=$BASEDIR
    else
	MAIN_DIR=/var/lib/mythtv
    fi
    if [ "$HDVIDEO_VARIABLES" == "y" ] || [ "$VIDEO_VARIABLES" == "y" ]; then
	BASE_DIR=${MAIN_DIR}
	ORIGINAL_DIR=uncompressed
	DIRECTORY=""
    elif [ "$AUDIO_VARIABLES" == "y" ]; then
	BASE_DIR=${MAIN_DIR}/music
	ORIGINAL_DIR=High-Quality
	DEST_DIR=${MAIN_DIR}/"portable_media/Music/My CDs"
	DIRECTORY=""
	BEGIN_EXT=.flac
	END_EXT=.mp3
    elif [ "$PHOTO_VARIABLES" == "y" ]; then
	BASE_DIR=${MAIN_DIR}/pictures/Photos
	ORIGINAL_DIR=tif
	DIRECTORY=""
	BEGIN_EXT=.tif
    fi
    cd ${BASE_DIR}/${ORIGINAL_DIR}
}

#################################
#
# function search_file
#
#
#
################################
function search_file () {
    if [ "$VIDEO_VARIABLES" == "y" ]; then
	config_video
    elif [ "$HDVIDEO_VARIABLES" == "y" ]; then
	config_video
    elif [ "$AUDIO_VARIABLES" == "y" ]; then
	convert_audio
    elif [ "$PHOTO_VARIABLES" == "y" ]; then
	convert_photos
    fi
}

######################################
#
# function video_tag_set
#
# input:
# output:
#
# Programs used: AtomicParsley
#
######################################
function video_tag_set () {
    TYPE=`echo "$DIRECTORY" | cut -d/ -f2`
    TYPE=`echo "$TYPE" |sed s/\s$//g `
    if [ "$TYPE" == "Movie" ]; then
	TITLE="$FILE"
	AtomicParsley "${OUTFILE}" --overWrite --title "$TITLE" --stik "$TYPE"
    elif [ "$TYPE" == "Music Video" ]; then
	TITLE="$FILE"
	ARTIST=`echo "$DIRECTORY" | cut -d/ -f3`
	ALBUM=`echo "$DIRECTORY" | cut -d/ -f4`
	AtomicParsley "${OUTFILE}" --overWrite --artist "$ARTIST" --title "$TITLE" --album "$ALBUM" --stik "$TYPE"
    else # TV Series
	TITLE=`echo "$FILE" | cut -d\  -f3-`
	EPISODENUM=`echo "$FILE" | cut -d\  -f1`
	ARTIST=`echo "$DIRECTORY" | cut -d/ -f3`
	ALBUM=`echo "$DIRECTORY" | cut -d/ -f4`
	SEASON_CHECK=`echo "$ALBUM" | cut -d\  -f1`
	if [ "$SEASON_CHECK" == "Season" ]; then
	    SEASON=`echo "$ALBUM" | cut -d\  -f2`
	else
	    SEASON=1
	fi
	AtomicParsley "${OUTFILE}" --overWrite --artist "$ARTIST" --title "$TITLE" --album "$ALBUM" --tracknum "$EPISODENUM" --stik "$TYPE" --TVShowName "$ARTIST" --TVEpisode "$TITLE" --TVSeasonNum "$SEASON" --TVEpisodeNum "$EPISODENUM"
    fi
}

#########################
#
# config_video_audiotracks
#
# input: original mkv file
# output: AUDIO_TRACK, a list of audio tracks within the original mkv file
#         AUDIO_FORMAT, the output format for the audio tracks to use
#                       in this case, use auto-passthrough, aka copy
#
# Programs used: mplayer
#
#########################
function config_video_audiotracks () {
    AUDIO_TRACK="1"
    AUDIO_FORMAT="copy"
    AUDIO_MIXDOWN="auto"
    AUDIO_SAMPLERATE="Auto"
    AUDIO_BITRATE="0"
    AUDIO_TRACKS_LIST=`mplayer -vo null -ao null -frames 0 -v "${BASE_DIR}/${ORIGINAL_DIR}${DIRECTORY}/${FILE}${BEGIN_EXT}" | grep aid | grep alang | cut -d- -f2`
    AUDIO_TRACKS_LIST=`echo ${AUDIO_TRACKS_LIST} |cut -d, -f2-`
    ACOUNT=2
    while [ -n "$AUDIO_TRACKS_LIST" ]; do
	AUDIO_TRACKS_LIST=`echo $AUDIO_TRACKS_LIST |cut -d, -f2-`
	AUDIO_TRACK="${AUDIO_TRACK},${ACOUNT}"
	AUDIO_FORMAT="${AUDIO_FORMAT},copy"
	AUDIO_MIXDOWN="${AUDIO_MIXDOWN},auto"
	AUDIO_SAMPLERATE="${AUDIO_SAMPLERATE},Auto"
	AUDIO_BITRATE="${AUDIO_BITRATE},0"
	ACOUNT=`expr $ACOUNT + 1`
    done
}

#########################
#
# config_video_subtracks
#
# input:
# output:
#
# Programs used: mplayer
#
#########################
function config_video_subtracks () {
    SUB_TRACKS_LIST=`mplayer -vo null -ao null -frames 0 -v "${BASE_DIR}/${ORIGINAL_DIR}${DIRECTORY}/${FILE}${BEGIN_EXT}" | grep sid | grep slang | cut -d- -f2`
    SUB_TRACKS_LIST=`echo ${SUB_TRACKS_LIST} |cut -d, -f2-`
    SCOUNT=2
    while [ -n "$SUB_TRACKS_LIST" ]; do
	      SUB_TRACKS_LIST=`echo $SUB_TRACKS_LIST |cut -d, -f2-`
	      SUB_TRACK="${SUB_TRACK},${SCOUNT}"
	      SCOUNT=`expr $SCOUNT + 1`
    done
}

##########################
#
# convert_film
#
# input:
# output:
#
# Programs used: none
#
##########################
function convert_film () {
    if [ "$DISCTYPE" == "Blu" ]; then
	      VID_QUAL=22
	      H264_LEVEL=4.1
	      XRES="-X 1920"
    else
	      VID_QUAL=20
	      H264_LEVEL=3.1
	      XRES="-X 720"
    fi
    IPOD=""
    SUB_TRACK="--subtitle 1"
    if [ "${CODEC}" = "x265" ]; then
	      X264_PRESET="--encoder-preset=placebo"
	      X264_TUNE=""
	      X264_PROFILE=""
	      ENCOPTS=""
	      DEINTERLACE="--detelecine"
	      H264_CLI_LEVEL=""
	      config_video_audiotracks
	      config_video_subtracks
    else
	      X264_PRESET="--x264-preset=placebo"
	      X264_TUNE="--x264-tune=film"
	      X264_PROFILE="--x264-profile=high"
	      ENCOPTS="-x level=${H264_LEVEL}"
	      DEINTERLACE="--detelecine --decomb"
	      H264_CLI_LEVEL="--h264-level=${H264_LEVEL}"
	      AUDIO_TRACK="1"
	      AUDIO_FORMAT="copy"
	      AUDIO_MIXDOWN="auto"
	      AUDIO_SAMPLERATE="Auto"
	      AUDIO_BITRATE="0"
     fi
     ANAMORPHIC="--loose-anamorphic"
     GREY=""
 }

 ##########################
 #
 # convert_animation
 #
 # input:
 # output:
 #
 # Programs used: none
 #
 ##########################
 function convert_animation () {
     if [ "$DISCTYPE" == "Blu" ]; then
	       VID_QUAL=22
	       H264_LEVEL=4.1
	       XRES="-X 1920"
     else
	       VID_QUAL=20
	       H264_LEVEL=3.1
	       XRES="-X 720"
     fi
     IPOD=""
     SUB_TRACK="--subtitle 1"
     if [ "${CODEC}" == "x265" ]; then
	       X264_PRESET="--encoder-preset=placebo"
	       X264_TUNE=""
	       X264_PROFILE=""
	       ENCOPTS=""
	       DEINTERLACE="--detelecine"
         H264_CLI_LEVEL=""
	       config_video_audiotracks
	       config_video_subtracks
     else
	       X264_PRESET="--x264-preset=placebo"
	       X264_TUNE="--x264-tune=animation"
	       X264_PROFILE="--x264-profile=high"
	       ENCOPTS="-x level=${H264_LEVEL}"
	       DEINTERLACE="--detelecine --decomb"
         H264_CLI_LEVEL="--h264-level=${H264_LEVEL}"
	       AUDIO_TRACK="1"
	       AUDIO_FORMAT="copy"
	       AUDIO_MIXDOWN="auto"
	       AUDIO_SAMPLERATE="Auto"
	       AUDIO_BITRATE="0"
     fi
     ANAMORPHIC="--loose-anamorphic"
     GREY=""
 }

 ##########################
 #
 # convert_bw
 #
 # input:
 # output:
 #
 # Pragrams used:
 #
 ##########################
 function convert_bw () {
     convert_film
     GREY="-g"
 }

 #########################
 #
 # convert_portablevid
 #
 # input:
 # output:
 #
 # Programs used:
 #
 #########################
 function convert_portablevid () {
     VID_QUAL=20
     H264_CLI_LEVEL=3.1
     CODEC=x264
     X264_PRESET=fast
     X264_TUNE=film
     X264_PROFILE=high
     AUDIO_TRACK="1"
     AUDIO_FORMAT=faac
     IPOD="-I"
     ANAMORPHIC="--loose-anamorphic"
     DEINTERLACE=""
 #    ENCOPTS="-x level=${H264_LEVEL}"
     ENCOPTS=""
     XRES="-X 720"
 }

 ##########################
 #
 # convert_video
 #
 # input:
 # output:
 #
 # Programs useds: HandBrakeCLI
 #
 #########################
 function convert_video () {
     FILE=`echo "$FILE" |sed s/\${BEGIN_EXT}$//g`
     INFILE="${BASE_DIR}/${ORIGINAL_DIR=AL_DIR}${DIRECTORY}/${FILE}${BEGIN_EXT}"
     OUTFILE="${DEST_DIR}${OUTPUTDIR}${FILE}${END_EXT}"
     if [ "${HDVIDEO}" == "y" ]; then
	       LOGFILE="${BASE_DIR}/log/${CODEC}/${TRAILDIR}${OUTPUTDIR}/${FILE}.log"
     else
	       LOGFILE="${BASE_DIR}/log/Portable/${OUTPUTDIR}/${FILE}.log"
     fi
     #echo $INFILE
     if [ "${EXTRAS}" != "extras" ]; then
	       if [ -h "${OUTFILE}" ]; then
	           rm "${OUTFILE}"
	       fi
	       if [ ! -e "${OUTFILE}" ]; then
             if [ "$ID" == "y" ]; then
		             echo "File to convert = " $FILE
	           elif [ "${SYMLINK}" == "y" ]; then
		             mkdir -p "${DEST_DIR}${OUTPUTDIR}"
		             pushd "${DEST_DIR}${OUTPUTDIR}" > /dev/null
		             if [ "${VIDEOTYPE}" == "Movies" ]; then
		                 SYMDIR="../../../"
		             fi
		             if [ "${VIDEOTYPE}" == "TV Shows" ]; then
		                 SYMDIR="../../../../../"
		             fi
		             SYMFILE="${SYMDIR}${ORIGINAL_DIR}/${DIRECTORY}/${FILE}${BEGIN_EXT}"
		             if [ -e "${SYMFILE}" ]; then
		                 ln -s "${SYMFILE}"
		             else
		                 echo $SYMFILE
		                 echo "File does not exist"
		             fi
		             popd > /dev/null
             else
		             if [ "$HDVIDEO_VARIABLES" == "y" ]; then
		                 if [ "$FORMAT" == "Film" ]; then
			                   convert_film
		                 elif [ "$FORMAT" == "BW" ]; then
			                   convert_bw
		                 elif [ "$FORMAT" == "Animation" ]; then
			                   convert_animation
		                 fi
		             else
		                 if [ "$EXTRAS" != "extras" ]; then
			                   convert_portablevid
		                 fi
		             fi

		             echo "Converting " $FILE
		             if [ "${HDVIDEO}" = "y" ]; then
		                 mkdir -p "${DEST_DIR}${OUTPUTDIR}"
		                 mkdir -p "${BASE_DIR}/log/${CODEC}/${TRAILDIR}${OUTPUTDIR}"
		             else
		                 mkdir -p "${DEST_DIR}${OUTPUTDIR}"
		                 mkdir -p "${BASE_DIR}/log/Portable/${OUTPUTDIR}"
		             fi
		             echo "Hostname " $HOSTNAME > "${LOGFILE}"

		             echo "" >> "${LOGFILE}"
		             echo "Converting " $FILE >> "${LOGFILE}"
		             echo "" >> "${LOGFILE}"
		             echo "HandBrakeCLI -i \"${INFILE}\" -t 1 --angle 1 -o \"${OUTFILE}\" ${IPOD} ${GREY} -f ${OUTFILE_TYPE} ${DEINTERLACE} ${ANAMORPHIC} --modulus 16 -e ${CODEC} -q ${VID_QUAL} --vfr -a ${AUDIO_TRACK} -E ${AUDIO_FORMAT} -6 ${AUDIO_MIXDOWN} -R ${AUDIO_SAMPLERATE} -B ${AUDIO_BITRATE} -D ${AUDIO_BITRATE} --gain ${AUDIO_BITRATE} --audio-fallback faac ${SUB_TRACK} -m ${X264_PRESET} ${X264_PROFILE} ${X264_TUNE} ${XRES} ${H264_CLI_LEVEL} --verbose=1" >> "${LOGFILE}"
		             echo "" >> "${LOGFILE}"

		             /usr/bin/time -a -o "${LOGFILE}" HandBrakeCLI -i "${INFILE}" -t 1 --angle 1 -o "${OUTFILE}" ${IPOD} ${GREY} -f ${OUTFILE_TYPE} ${DEINTERLACE} ${ANAMORPHIC} --modulus 16 -e ${CODEC} -q ${VID_QUAL} --vfr -a ${AUDIO_TRACK} -E ${AUDIO_FORMAT} -6 ${AUDIO_MIXDOWN} -R ${AUDIO_SAMPLERATE} -B ${AUDIO_BITRATE} -D ${AUDIO_BITRATE} --gain ${AUDIO_BITRATE} --audio-fallback faac ${SUB_TRACK} -m ${X264_PRESET} ${X264_PROFILE} ${X264_TUNE} ${XRES} ${H264_CLI_LEVEL} --verbose=1 2>> "${LOGFILE}"
		             echo "${FILE} Converted"
                 echo ""
		   #               video_tag_set
             fi
	           NUMFILES=`expr $NUMFILES + 1`
	           VIDEOFILES=`expr $VIDEOFILES + 1`
	       fi
     fi
}

###########################
#
# config_video
#
###########################
function config_video () {
    FILE_TYPE=`file -ib "$FILE" | cut -d\/ -f2 | cut -d\; -f1`
    if [ "$FILE_TYPE" == "mp4" ] || [ "$FILE_TYPE" == "octet-stream" ] || [ "$FILE_TYPE" == "x-matroska" ]; then 
	if [ "$FILE_TYPE" == "mp4" ]; then
	    BEGIN_EXT=.mp4
	else
	    BEGIN_EXT=.mkv
	fi

	VIDEOTYPE=`echo $DIRECTORY |cut -d\/ -f2`

	if [ "${VIDEOTYPE}" == "Movies" ] || [ "${VIDEOTYPE}" == "TV Shows" ]; then
	    TYPE=`echo $DIRECTORY | cut -d\/ -f3-4`
	    DISCTYPE=`echo $TYPE | cut -d\/ -f1`
	    FORMAT=`echo $TYPE | cut -d\/ -f2`
	    EXTRAS_TV=`echo $DIRECTORY |cut -d\/ -f7`
	    EXTRAS_DVD=`echo $DIRECTORY |cut -d\/ -f5`
	    EXTRAS_SHORT=`echo $DIRECTORY |cut -d\/ -f6`
	    
	    if [ "${FORMAT}" != "Blu backup" ]; then
		
		if [ "$EXTRAS_TV" == "Extras" ] || [ "$EXTRAS_DVD" == "Extras" ] || [ "$EXTRAS_SHORT" == "Extras" ]; then
		    EXTRAS=extras
		else
		    EXTRAS=""
		fi
		
		if [ "$HDVIDEO_VARIABLES" == "y" ]; then
		    OUTFILE_TYPE=mkv
		    END_EXT=.mkv
		else
		    OUTFILE_TYPE=mp4
		    END_EXT=.mp4
		fi
		
		SHORT=`echo $DIRECTORY|cut -d\/ -f2`
		if [ "$SHORT" == "Shorts" ]; then
		    DEST_DIR=${MAIN_DIR}trailers/
		    OUTPUTDIR1=""
		    TRAILDIR="trailers/"
		elif [ "${VIDEO_VARIABLES}" == "y" ]; then
		    DEST_DIR=${MAIN_DIR}/portable_media/Videos/
		    OUTPUTDIR1=`echo $DIRECTORY | cut -d\/ -f2`
		    TRAILDIR=""
		else
		    if [ "$CODEC" == "x265" ]; then
			      DEST_DIR=${MAIN_DIR}/videos/My\ Discs/
		    else
			      DEST_DIR=${MAIN_DIR}/videos_264/
		    fi
		    OUTPUTDIR1=`echo $DIRECTORY | cut -d\/ -f2`
		    TRAILDIR=""
		fi
		OUTPUTDIR2=`echo $DIRECTORY | cut -d\/ -f5-`
		OUTPUTDIR=${OUTPUTDIR1}/${OUTPUTDIR2}/
		convert_video
	    fi
	fi
    fi
}

######################################
#
# convert_audio
#
# input:
# output:
#
# Programs used: flac, lame
#
######################################
function convert_audio () {
    MIME=`file -ib "$FILE" | cut -d\/ -f2 | cut -d\; -f1`
    mkdir -p "${DEST_DIR}${DIRECTORY}/"
    if [ $MIME == "jpeg" ] || [ $MIME == "png" ]; then
	OUTFILE="${DEST_DIR}${DIRECTORY}/${FILE}"
	if [ ! -e "$OUTFILE" ]; then
#	    cp "${BASE_DIR}/${ORIGINAL_DIR}${DIRECTORY}/$FILE" "$OUTFILE"
	    echo $FILE
	fi
    elif [ $MIME == "plain" ]; then
	echo $PWD/$FILE
    else
	FILE=`echo "$FILE" |sed s/\${BEGIN_EXT}$//g `
	OUTFILE="${DEST_DIR}${DIRECTORY}/${FILE}${END_EXT}"
	if [ ! -e "$OUTFILE" ]; then
	    if [ "$ID" == "y" ]; then
		echo "File to convert = " $FILE
	    else
		flac -c -d "${BASE_DIR}/${ORIGINAL_DIR}${DIRECTORY}/${FILE}${BEGIN_EXT}" | lame -V 0 - "$OUTFILE"		
	    fi	
	    NUMFILES=`expr $NUMFILES + 1`
	    AUDIOFILES=`expr $AUDIOFILES + 1`
	fi
	audio_tag_set
    fi
}

#################################
#
# function audio_tag_set
#
# input:
# output:
#
# Programs used: metaflac, id3v2
#
#################################
function audio_tag_set () {
    if [ -e "$OUTFILE" ]; then
	ARTIST=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=ARTIST | sed s/.*=//g`
	TITLE=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=TITLE | sed s/.*=//g`
	ALBUM=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=ALBUM | sed s/.*=//g`
	GENRE=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=GENRE | sed s/.*=//g`
	TRACKNUMBER=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=TRACKNUMBER | sed s/.*=//g`
	TOTALTRACK=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=TRACKTOTAL | sed s/.*=//g`
	DATE=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=DATE | sed s/.*=//g`
	URL=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=LICENSE | sed s/.*=//g`
	COMPOSER=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=COMPOSER | sed s/.*=//g`
	LYRICS=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=LYRICS | sed s/.*=//g`
	DISC=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=DISCNUMBER | sed s/.*=//g`
	DISCTOTAL=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=DISCTOTAL | sed s/.*=//g`
	ALBUMARTIST=`metaflac "${FILE}${BEGIN_EXT}" --show-tag=ALBUMARTIST | sed s/.*=//g`
#	if [ -e *jpg ]; then
#	    COVERARTWORK=`ls *.jpg`
#	elif [ -e *png ]; then
#	    COVERARTWORK=`ls *.png`
#	else
#	    echo "No Cover Art"
#	    COVERARTWORK=""
#	fi
	COVERARTWORK="${BASE_DIR}/${ORIGINAL_DIR}${DIRECTORY}/cover.jpg"
	echo $COVERARTWORK
	id3v2 -t "$TITLE" -T "${TRACKNUMBER}/${TOTALTRACK}" -a "$ARTIST" -A "$ALBUM" -y "$DATE" -g "${GENRE}" --WOAR "$URL" --TCOM "$COMPOSER" --TPE2 "$ALBUMARTIST" --TPOS "${DISC}/${DISCTOTAL}" --USLT "$LYRICS" "$OUTFILE"
	eyeD3 --remove-images "${OUTFILE}"
	eyeD3 --add-image="${COVERARTWORK}":FRONT_COVER "${OUTFILE}"
    fi
}

############################
#
# convert_photos
#
#
#
############################
function convert_photos () {
    if [ "$DESKTOP" == "y" ]; then
	TEMP_BASE_DIR=$HOME
	DEST_DIR=Pictures/Desktop
	END_EXT=.jpg
	SIZE="-resize 1920x1080"
	convert_image
    fi
    if [ "$JPG_WEB" == "y" ]; then
	TEMP_BASE_DIR=$BASE_DIR
	DEST_DIR=jpg_web
	END_EXT=.jpg
	SIZE=""
	convert_image
    fi
    if [ "$SMALL" == "y" ]; then
	TEMP_BASE_DIR=$BASE_DIR
	DEST_DIR=small
	END_EXT=.jpg
	SIZE="-resize 640"
	convert_image
    fi
    if [ "$FRIDGE" == "y" ]; then
	TEMP_BASE_DIR=$BASE_DIR
	DEST_DIR=fridge
	END_EXT=.jpg
	SIZE="-resize 480"
	convert_image
    fi
    if [ "$PHONE" == "y" ]; then
	TEMP_BASE_DIR=$BASE_DIR
	DEST_DIR=${MAIN_DIR}/"portable_media/Pictures"
	END_EXT=.jpg
	SIZE="-resize 800"
	convert_image
    fi
}

###############################
#
# function convert_image
#
# input:
# output:
#
# Programs used: convert
#
###############################
function convert_image () {
    FILE=`echo "$FILE" |sed s/\${BEGIN_EXT}$//g `
    OUTFILE="${TEMP_BASE_DIR}/${DEST_DIR}${DIRECTORY}/${FILE}${END_EXT}"
    if [ ! -e "$OUTFILE" ]; then
	if [ "$ID" == "y" ]; then
	    echo "File to convert = " $FILE
	else
	    mkdir -p "${TEMP_BASE_DIR}/${DEST_DIR}${DIRECTORY}/"
      	    convert $SIZE "${TEMP_BASE_DIR}/${ORIGINAL_DIR}${DIRECTORY}/${FILE}${BEGIN_EXT}" "$OUTFILE"
	fi
	NUMFILES=`expr $NUMFILES + 1`
	PHOTOFILES=`expr $PHOTOFILES + 1`
    fi
}

 function main () {
     SWFI=0      # ==> Search finished flag.
     CONVERSIONFLAG=0 # ==> Set Full Conversion flag.
     DEEP=0      # ==> Depth of listing.
     NUMFILES=0
     VIDEOFILES=0
     AUDIOFILES=0
     AUDIOFILESUPDATE=0
     PHOTOFILES=0
     VIDEO_VARIABLES=n
     AUDIO_VARIABLES=n
     PHOTO_VARIABLES=n

     while [ -n "$1" ]; do
	 case $1 in
	     -A|--all) HDVIDEO=y; VIDEO=y; AUDIO=y; PHOTO=y; shift 1;;
	     -a|--audio) AUDIO=y; shift 1;;
	     -b|--basedir) BASEDIR=$2; shift 2;;
	     -c|--check) CHECK=y; shift 1;;
	     -d|--desktop) DESKTOP=y;shift 1;;
	     -f|--fridge) FRIDGE=y; shift 1;;
	     -i|--id|--identify) ID=y; shift 1;;
	     -j|--jpg_web) JPG_WEB=y; shift 1;;
	     -l|--link) SYMLINK=y; shift 1;;
	     -m|--movie-file-type) OUTFILE_TYPE=$2; shift 2;;
	     -o|--overwrite) OVERWRITE=y; shift 1;;
	     -p|--photo) PHOTO=y; shift 1;; 
	     -s|--small)  SMALL=y; shift 1;;
	     -u|--update) AUDIOUPDATE=y; shift 1;;
	     -v|--video) VIDEO=y; shift 1;;
	     -y|--hdvideo) HDVIDEO=y; CODEC=x264; shift 1;;
	     -z|--h265) HDVIDEO=y; CODEC=x265; shift 1;;
	     -w|--wallpaper) WALLPAPER=y; shift 1;;
	     *)    help; exit;;
	esac
    done
     if [ "$CHECK" == "y" ]; then
	 # check_function
	 echo "crap"
     fi

    if [ "$OVERWRITE" == "y" ]; then
	if [ -n "$BASEDIR" ]; then
	    MAIN_DIR=$BASEDIR
	else
	    MAIN_DIR=/home/mythtv
	fi
	DEST_DIR="Portable Media"
	cd "${MAIN_DIR}/${DEST_DIR}"
	ls *
    fi
    
    if [ "$HDVIDEO" == "y" ]; then
	HDVIDEO_VARIABLES=y
	VIDEO_VARIABLES=n
	AUDIO_VARIABLES=n
	PHOTO_VARIABLES=n
	set_base_variables
	while [ "$SWFI" != 1 ]   # While flag not set...
	do
	    search   # ==> Call function after initializing variables.
	done
	SWFI=0
	DEEP=0
    fi
    if [ "$VIDEO" == "y" ]; then
	HDVIDEO_VARIABLES=n
	VIDEO_VARIABLES=y
	AUDIO_VARIABLES=n
	PHOTO_VARIABLES=n
	set_base_variables
	while [ "$SWFI" != 1 ]   # While flag not set...
	do
	    search   # ==> Call function after initializing variables.
	done
	SWFI=0
	DEEP=0
    fi
    if [ "$AUDIO" == "y" ]; then
	HDVIDEO_VARIABLES=n
	VIDEO_VARIABLES=n
	AUDIO_VARIABLES=y
	PHOTO_VARIABLES=n
	set_base_variables
	while [ "$SWFI" != 1 ]   # While flag not set...
	do
	    search   # ==> Call function after initializing variables.
	done
	SWFI=0
	DEEP=0
    fi
    if [ "$PHOTO" == "y" ]; then
	HDVIDEO_VARIABLES=n
	VIDEO_VARIABLES=n
	AUDIO_VARIABLES=n
	PHOTO_VARIABLES=y
	set_base_variables

	while [ "$SWFI" != 1 ]   # While flag not set...
	do
	    search   # ==> Call function after initializing variables.
	done
	SWFI=0
	DEEP=0
    fi
    
    echo "Video files converted = $VIDEOFILES"
    echo "Audio files converted = $AUDIOFILES"
    echo "Photos converted = $PHOTOFILES"
	
    echo "Total files converted = $NUMFILES"
    return 0
}

TEMPLANG=$LANG


main $@
LANG=$TEMPLANG

exit 0
